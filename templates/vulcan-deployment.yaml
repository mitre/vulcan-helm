apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "vulcan.fullname" . }}
  labels: # must match the service
    app: {{ include "vulcan.fullname" . }}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ include "vulcan.fullname" . }}
  strategy:
    type: RollingUpdate   # Upgrade this application with a rolling strategy
    rollingUpdate:
      maxSurge: 1         # maximum number of pods that can be scheduled above the desired number of pods (replicas)
      maxUnavailable: 0
  template:
    metadata:
      labels: # must match service and replicaset matchlabel
        app: {{ include "vulcan.fullname" . }}
    spec:
      initContainers:
      - name: check-db-ready
        image: {{.Values.postgresql.image.repository}}:{{ .Values.postgresql.image.tag }}
        command: ['sh', '-c',
          'until pg_isready -h postgres -p 5432;
          do echo waiting for database; sleep 5; done;']
      containers:
      - name: {{ include "vulcan.fullname" . }}
        image: {{.Values.image.repository}}:{{.Values.image.tag}}
        imagePullPolicy: "Always"
        ports:
        - containerPort: {{.Values.deployments.containerPort}}
          name: {{ include "vulcan.fullname" . }}
        envFrom:
        - configMapRef:
            name: {{ .Values.configmap.name }}
        readinessProbe:
            httpGet:
              path: /
              port: {{.Values.deployments.containerPort}}
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 2
